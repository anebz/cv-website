AWSTemplateFormatVersion: 2010-09-09
Description: Creates a DynamoDB table

Parameters:
  BucketName:
    Type: String
    Default: 'anebz-cv'

Resources:

  # DynamoDB table
  MyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "date"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "date"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
    DependsOn:
      - DynamoDBQueryPolicy

  DynamoDBQueryPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: DynamoDBQueryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "dynamodb:Query"
            Resource: "*"
      Roles:
        - Ref: "MyTableQueryRole"

  MyTableQueryRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "dynamodb.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # S3 Bucket
  S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
          AccessControl: PublicRead
          WebsiteConfiguration:
              IndexDocument: index.html
  
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

  # Lambda function
  # https://leaherb.com/aws-lambda-tutorial-101/
  # https://github.com/awslabs/aws-cloudformation-templates/blob/master/community/services/Lambda/LambdaSample.yaml
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName:
      #  Fn::Sub: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Path: /

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import os
          import boto3
          import json
          from datetime import datetime
          ddbClient = boto3.client('dynamodb', region_name='eu-central-1')
          def lambda_handler(event, context):
              dbresponse = ddbClient.update_item(
                  TableName="${MyTable}",
                  Key={'date': {'S': datetime.today().strftime('%Y-%m-%d')}},
                  UpdateExpression="ADD #counter :increment",
                  ExpressionAttributeNames={'#counter': 'count'},
                  ExpressionAttributeValues={':increment': {'N': '1'}}
              )
              httpscode = dbresponse['ResponseMetadata']['HTTPStatusCode']
              return {'statusCode': httpscode,
                      'body': json.dumps('Count updated' if httpscode == 200 else 'Error: count was not updated')}

  # API Gateway
  # TODO API exists, but needs stage and security mechanism to be a trigger to Lambda
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: my-HTTP-API
      Description: HTTP API
      ProtocolType: HTTP

  ConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - MyLambdaFunction
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  MyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY #AWS_PROXY for HTTP, AWS for REST
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations'

  DemoApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /" #/demo in the original
      AuthorizationType: AWS_IAM
      Target: !Join
        - /
        - - integrations
          - !Ref MyIntegration

Outputs:
  WebsiteURL:
    Value: !GetAtt [S3Bucket, WebsiteURL]
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt [S3Bucket, DomainName]
    Description: Name of S3 bucket to hold website content